.include "pmem_defs.asm"
	
.set    MEAS_ADDR,  0x5000

.global main

main:

    mov     #DMEM_250, r1           ; Initialize stack pointer
	mov	#0x5000, r7
	mov	#0x0010, &BCSCTL2	; Divide clock 20MHz
	mov	#0x5A80, &WDTCTL	; Watchdog controller 
	dint
	;mov	#0x0007, &TUN_MUX
	mov	#0x0002, &TUN_MUX
	mov     #0x8000, &PROG_BITS     ; PROG = 1, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
    mov     #0xBE04, &GP_PER_3      ; Enable 5V, enable 6V, esd=6v
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
    mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
    ;mov     #0x0014, &GP_PER_1      ; IVDD to 6.0V, Set vtun_ext = 12V, avdd_25 = 2.5V
    mov     #10, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
	mov     #0x0060, &DRAIN_CTRL    ; drain=ivdd, no use DAC, i2v mux control=i_char, diode  
    mov     #10, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
	mov     #0xB000, &PROG_BITS     ; Set measure_adc high, Toggle the adc counter's clear_n
    mov     #10, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
    mov     #0, &ADC                ; Write counter value into ADC via dummy write
	mov     &ADC, @r7	        ; Get value in counter
        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	mov	#0x0000, &BCSCTL2
	nop
	br #0xffff

; ***********************************************************
; wait_loop --
;   r4 = number of inner loop iterations in a ms 
;   r5 = number of ms to execute
;   r6 = number of inner loop iterations left
; ***********************************************************

wait_ms:
        mov     #3324, r4               ; Number of clock cycles in a ms (chariterized by pulse measure)
        mov     r4, r6                  ; Get number of inner loop iterations
wait_loop:
        dec.w   r6                      ; Subtract from number of clk cycles.Execution takes 2 clock cycles
        jnz     wait_loop               ; Test for loop termination. Execution takes 2 clock cycles
        mov     r4, r6                  ; Reset number of clock cycles
        dec.w   r5                      ; Decrement number of ms total
        jnz     wait_loop               ; Keep looping if necessary
        ret     

        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
